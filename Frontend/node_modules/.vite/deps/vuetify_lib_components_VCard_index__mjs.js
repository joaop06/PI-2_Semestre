import {
  makePositionProps,
  usePosition
<<<<<<< HEAD
} from "./chunk-Q2UGMMZB.js";
=======
<<<<<<< HEAD
} from "./chunk-QZ7VCWOG.js";
=======
} from "./chunk-VQMEV6YX.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  LoaderSlot,
  makeLoaderProps,
  useLoader
<<<<<<< HEAD
} from "./chunk-XYSEDJ5P.js";
import "./chunk-K5DMOPVM.js";
=======
<<<<<<< HEAD
} from "./chunk-6FG2PNFV.js";
import "./chunk-JW2UM3P6.js";
=======
} from "./chunk-IRFKUC4W.js";
import "./chunk-JUJFEPYV.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  makeLocationProps,
  useLocation
} from "./chunk-QVJ5FKRY.js";
import {
  VAvatar
} from "./chunk-25XBF7TE.js";
import {
  Ripple
<<<<<<< HEAD
} from "./chunk-BK3OT3NR.js";
=======
<<<<<<< HEAD
} from "./chunk-TSNFY2XD.js";
import {
  genOverlays,
  makeVariantProps,
  useVariant
} from "./chunk-EL6KV6TQ.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-LXWSJH5Z.js";
=======
} from "./chunk-MZC6GY57.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  makeBorderProps,
  makeElevationProps,
  useBorder,
  useElevation
<<<<<<< HEAD
} from "./chunk-HP3FWH2N.js";
=======
<<<<<<< HEAD
} from "./chunk-BQO2APH3.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-ACCWBWTZ.js";
import "./chunk-OENXB5NN.js";
import "./chunk-KPMVJ7Y3.js";
import {
  VImg
} from "./chunk-YNRLBMVX.js";
import "./chunk-L2J4MZND.js";
import {
  VDefaultsProvider
} from "./chunk-EQEIRMXT.js";
import {
  makeRouterProps,
  useLink
} from "./chunk-IXNPOS7S.js";
import "./chunk-QZQCFNXC.js";
import "./chunk-ZQYJDLL3.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-JUVDP6EI.js";
import {
  IconValue
} from "./chunk-7G5EJUSK.js";
import "./chunk-2INXYW3P.js";
import "./chunk-TNIMFTP4.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-XC5CLHYL.js";
import {
  makeTagProps
} from "./chunk-36OQOIRA.js";
=======
} from "./chunk-F3XFLBHS.js";
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  genOverlays,
  makeVariantProps,
  useVariant
} from "./chunk-5PWSZVMH.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-4TSTLCRR.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-KPXZKFAY.js";
import "./chunk-AHP7Q3ZL.js";
import "./chunk-OMSOWFL2.js";
import {
  VImg
} from "./chunk-JKMPFP2W.js";
import "./chunk-RFGETJ36.js";
import {
  VDefaultsProvider
} from "./chunk-QXHUBXME.js";
import {
  makeRouterProps,
  useLink
} from "./chunk-SKDTGIBE.js";
import "./chunk-EHDJ5PST.js";
import "./chunk-44BUWKLP.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-JDEX4RHE.js";
import {
  IconValue
} from "./chunk-ERAWJXH7.js";
import "./chunk-Z7MXSDGL.js";
import "./chunk-7QYDIJFI.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-UBIRPD2D.js";
import {
  makeTagProps
<<<<<<< HEAD
} from "./chunk-SA6BOMWB.js";
=======
} from "./chunk-BUCDLWZA.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  createSimpleFunctional,
  defineComponent,
  genericComponent,
  provideDefaults,
  useRender
<<<<<<< HEAD
} from "./chunk-FCFZN4VE.js";
=======
<<<<<<< HEAD
} from "./chunk-HL2KQ5HO.js";
=======
} from "./chunk-BQDQCPTT.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
>>>>>>> 22fac9918d7744ae8695bdc482f43e56e844511e
import {
  computed,
  createVNode,
  resolveDirective,
  withDirectives
} from "./chunk-SE5EWVSA.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VCard/VCard.mjs
import "C:/GitHub/PI-hosp/PI-2_Semestre/Frontend/node_modules/vuetify/lib/components/VCard/VCard.css";

// node_modules/vuetify/lib/components/VCard/VCardActions.mjs
var VCardActions = defineComponent({
  name: "VCardActions",
  setup(_, _ref) {
    let {
      slots
    } = _ref;
    provideDefaults({
      VBtn: {
        variant: "text"
      }
    });
    useRender(() => {
      var _a;
      return createVNode("div", {
        "class": "v-card-actions"
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCard/VCardSubtitle.mjs
var VCardSubtitle = createSimpleFunctional("v-card-subtitle");

// node_modules/vuetify/lib/components/VCard/VCardTitle.mjs
var VCardTitle = createSimpleFunctional("v-card-title");

// node_modules/vuetify/lib/components/VCard/VCardItem.mjs
var VCardItem = genericComponent()({
  name: "VCardItem",
  props: {
    appendAvatar: String,
    appendIcon: IconValue,
    prependAvatar: String,
    prependIcon: IconValue,
    subtitle: String,
    title: String,
    ...makeDensityProps()
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      var _a;
      const hasPrependMedia = !!(props.prependAvatar || props.prependIcon);
      const hasPrepend = !!(hasPrependMedia || slots.prepend);
      const hasAppendMedia = !!(props.appendAvatar || props.appendIcon);
      const hasAppend = !!(hasAppendMedia || slots.append);
      const hasTitle = !!(props.title || slots.title);
      const hasSubtitle = !!(props.subtitle || slots.subtitle);
      return createVNode("div", {
        "class": "v-card-item"
      }, [hasPrepend && createVNode("div", {
        "key": "prepend",
        "class": "v-card-item__prepend"
      }, [!slots.prepend ? hasPrependMedia && createVNode(VAvatar, {
        "key": "prepend-avatar",
        "density": props.density,
        "icon": props.prependIcon,
        "image": props.prependAvatar
      }, null) : createVNode(VDefaultsProvider, {
        "key": "prepend-defaults",
        "disabled": !hasPrependMedia,
        "defaults": {
          VAvatar: {
            density: props.density,
            icon: props.prependIcon,
            image: props.prependAvatar
          }
        }
      }, slots.prepend)]), createVNode("div", {
        "class": "v-card-item__content"
      }, [hasTitle && createVNode(VCardTitle, {
        "key": "title"
      }, {
        default: () => {
          var _a2, _b;
          return [(_b = (_a2 = slots.title) == null ? void 0 : _a2.call(slots)) != null ? _b : props.title];
        }
      }), hasSubtitle && createVNode(VCardSubtitle, {
        "key": "subtitle"
      }, {
        default: () => {
          var _a2, _b;
          return [(_b = (_a2 = slots.subtitle) == null ? void 0 : _a2.call(slots)) != null ? _b : props.subtitle];
        }
      }), (_a = slots.default) == null ? void 0 : _a.call(slots)]), hasAppend && createVNode("div", {
        "key": "append",
        "class": "v-card-item__append"
      }, [!slots.append ? hasAppendMedia && createVNode(VAvatar, {
        "key": "append-avatar",
        "density": props.density,
        "icon": props.appendIcon,
        "image": props.appendAvatar
      }, null) : createVNode(VDefaultsProvider, {
        "key": "append-defaults",
        "disabled": !hasAppendMedia,
        "defaults": {
          VAvatar: {
            density: props.density,
            icon: props.appendIcon,
            image: props.appendAvatar
          }
        }
      }, slots.append)])]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCard/VCardText.mjs
var VCardText = createSimpleFunctional("v-card-text");

// node_modules/vuetify/lib/components/VCard/VCard.mjs
var VCard = genericComponent()({
  name: "VCard",
  directives: {
    Ripple
  },
  props: {
    appendAvatar: String,
    appendIcon: IconValue,
    disabled: Boolean,
    flat: Boolean,
    hover: Boolean,
    image: String,
    link: {
      type: Boolean,
      default: void 0
    },
    prependAvatar: String,
    prependIcon: IconValue,
    ripple: {
      type: Boolean,
      default: true
    },
    subtitle: String,
    text: String,
    title: String,
    ...makeThemeProps(),
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeLoaderProps(),
    ...makeLocationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeRouterProps(),
    ...makeTagProps(),
    ...makeVariantProps({
      variant: "elevated"
    })
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      locationStyles
    } = useLocation(props);
    const {
      positionClasses
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const link = useLink(props, attrs);
    const isLink = computed(() => props.link !== false && link.isLink.value);
    const isClickable = computed(() => !props.disabled && props.link !== false && (props.link || link.isClickable.value));
    useRender(() => {
      const Tag = isLink.value ? "a" : props.tag;
      const hasTitle = !!(slots.title || props.title);
      const hasSubtitle = !!(slots.subtitle || props.subtitle);
      const hasHeader = hasTitle || hasSubtitle;
      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
      const hasImage = !!(slots.image || props.image);
      const hasCardItem = hasHeader || hasPrepend || hasAppend;
      const hasText = !!(slots.text || props.text);
      return withDirectives(createVNode(Tag, {
        "class": ["v-card", {
          "v-card--disabled": props.disabled,
          "v-card--flat": props.flat,
          "v-card--hover": props.hover && !(props.disabled || props.flat),
          "v-card--link": isClickable.value
        }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, loaderClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, locationStyles.value],
        "href": link.href.value,
        "onClick": isClickable.value && link.navigate,
        "tabindex": props.disabled ? -1 : void 0
      }, {
        default: () => {
          var _a;
          return [hasImage && createVNode("div", {
            "key": "image",
            "class": "v-card__image"
          }, [!slots.image ? createVNode(VImg, {
            "key": "image-img",
            "cover": true,
            "src": props.image
          }, null) : createVNode(VDefaultsProvider, {
            "key": "image-defaults",
            "disabled": !props.image,
            "defaults": {
              VImg: {
                cover: true,
                src: props.image
              }
            }
          }, slots.image)]), createVNode(LoaderSlot, {
            "name": "v-card",
            "active": !!props.loading,
            "color": typeof props.loading === "boolean" ? void 0 : props.loading
          }, {
            default: slots.loader
          }), hasCardItem && createVNode(VCardItem, {
            "key": "item",
            "prependAvatar": props.prependAvatar,
            "prependIcon": props.prependIcon,
            "title": props.title,
            "subtitle": props.subtitle,
            "appendAvatar": props.appendAvatar,
            "appendIcon": props.appendIcon
          }, {
            default: slots.item,
            prepend: slots.prepend,
            title: slots.title,
            subtitle: slots.subtitle,
            append: slots.append
          }), hasText && createVNode(VCardText, {
            "key": "text"
          }, {
            default: () => {
              var _a2, _b;
              return [(_b = (_a2 = slots.text) == null ? void 0 : _a2.call(slots)) != null ? _b : props.text];
            }
          }), (_a = slots.default) == null ? void 0 : _a.call(slots), slots.actions && createVNode(VCardActions, null, {
            default: slots.actions
          }), genOverlays(isClickable.value, "v-card")];
        }
      }), [[resolveDirective("ripple"), isClickable.value && props.ripple]]);
    });
    return {};
  }
});
export {
  VCard,
  VCardActions,
  VCardItem,
  VCardSubtitle,
  VCardText,
  VCardTitle
};
//# sourceMappingURL=vuetify_lib_components_VCard_index__mjs.js.map
