import {
  VBtn
<<<<<<< HEAD
} from "./chunk-QBNLRP2I.js";
import "./chunk-XYTR4NNF.js";
import "./chunk-GE7DCHMO.js";
import {
  VExpandTransition
} from "./chunk-QHMPGPLY.js";
import "./chunk-QZ7VCWOG.js";
import "./chunk-6FG2PNFV.js";
import "./chunk-JW2UM3P6.js";
import "./chunk-SZJWHQ4W.js";
import "./chunk-TSNFY2XD.js";
import {
  makeVariantProps
} from "./chunk-EL6KV6TQ.js";
import "./chunk-LXWSJH5Z.js";
=======
} from "./chunk-2K7AWASL.js";
import "./chunk-EWMDJHUF.js";
import "./chunk-ELVZFEG7.js";
import {
  VExpandTransition
} from "./chunk-3S3ULQK2.js";
import "./chunk-VQMEV6YX.js";
import "./chunk-IRFKUC4W.js";
import "./chunk-JUJFEPYV.js";
import "./chunk-QD43QOUS.js";
import "./chunk-MZC6GY57.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
import {
  makeBorderProps,
  makeElevationProps,
  useBorder,
  useElevation
<<<<<<< HEAD
} from "./chunk-BQO2APH3.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-ACCWBWTZ.js";
import "./chunk-OENXB5NN.js";
import "./chunk-KPMVJ7Y3.js";
import {
  VImg
} from "./chunk-YNRLBMVX.js";
import "./chunk-L2J4MZND.js";
import {
  VDefaultsProvider
} from "./chunk-EQEIRMXT.js";
import "./chunk-IXNPOS7S.js";
import {
  useBackgroundColor
} from "./chunk-QZQCFNXC.js";
import "./chunk-ZQYJDLL3.js";
import "./chunk-JUVDP6EI.js";
import {
  IconValue
} from "./chunk-7G5EJUSK.js";
import "./chunk-2INXYW3P.js";
import {
  useProxiedModel
} from "./chunk-TNIMFTP4.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-XC5CLHYL.js";
=======
} from "./chunk-F3XFLBHS.js";
import {
  makeVariantProps
} from "./chunk-K7MSCH4E.js";
import "./chunk-3LURJ2WI.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-KJMSBGNS.js";
import "./chunk-234SDWII.js";
import "./chunk-4T4M45BN.js";
import {
  VImg
} from "./chunk-WXY33B5Y.js";
import "./chunk-7RRW4FPN.js";
import {
  VDefaultsProvider
} from "./chunk-QWOPDVUT.js";
import {
  useBackgroundColor
} from "./chunk-LVJDYS3B.js";
import "./chunk-CF32TBSU.js";
import "./chunk-C5KFYXWH.js";
import {
  IconValue
} from "./chunk-D6Q7ADZC.js";
import "./chunk-SUXVDTZF.js";
import {
  useProxiedModel
} from "./chunk-TP7Z2ATC.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-AIRGC2CS.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
import {
  useSsrBoot
} from "./chunk-NLY4X2AJ.js";
import {
  makeTagProps
<<<<<<< HEAD
} from "./chunk-36OQOIRA.js";
import {
  makeLayoutItemProps,
  useLayoutItem
} from "./chunk-TOGDQUHA.js";
import "./chunk-B5LPH4AT.js";
=======
} from "./chunk-BUCDLWZA.js";
import {
  makeLayoutItemProps,
  useLayoutItem
} from "./chunk-WNCLWBII.js";
import "./chunk-FQSSON3Z.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
import {
  convertToUnit,
  genericComponent,
  pick,
  propsFactory,
  provideDefaults,
  useRender
<<<<<<< HEAD
} from "./chunk-HL2KQ5HO.js";
=======
} from "./chunk-BQDQCPTT.js";
>>>>>>> 2e6694fa0a683ecabf596e2c8247aea145f61aa8
import {
  computed,
  createVNode,
  mergeProps,
  ref,
  toRef
} from "./chunk-SE5EWVSA.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VAppBar/VAppBar.mjs
import "C:/GitHub/PI-hosp/PI-2_Semestre/Frontend/node_modules/vuetify/lib/components/VAppBar/VAppBar.css";

// node_modules/vuetify/lib/components/VToolbar/VToolbar.mjs
import "C:/GitHub/PI-hosp/PI-2_Semestre/Frontend/node_modules/vuetify/lib/components/VToolbar/VToolbar.css";

// node_modules/vuetify/lib/components/VToolbar/VToolbarTitle.mjs
var makeVToolbarTitleProps = propsFactory({
  text: String,
  ...makeTagProps()
}, "v-toolbar-title");
var VToolbarTitle = genericComponent()({
  name: "VToolbarTitle",
  props: makeVToolbarTitleProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      const hasText = !!(slots.default || slots.text || props.text);
      return createVNode(props.tag, {
        "class": "v-toolbar-title"
      }, {
        default: () => {
          var _a;
          return [hasText && createVNode("div", {
            "class": "v-toolbar-title__placeholder"
          }, [slots.text ? slots.text() : props.text, (_a = slots.default) == null ? void 0 : _a.call(slots)])];
        }
      });
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VToolbar/VToolbar.mjs
var allowedDensities = [null, "prominent", "default", "comfortable", "compact"];
var makeVToolbarProps = propsFactory({
  absolute: Boolean,
  collapse: Boolean,
  color: String,
  density: {
    type: String,
    default: "default",
    validator: (v) => allowedDensities.includes(v)
  },
  extended: Boolean,
  extensionHeight: {
    type: [Number, String],
    default: 48
  },
  flat: Boolean,
  floating: Boolean,
  height: {
    type: [Number, String],
    default: 64
  },
  image: String,
  title: String,
  ...makeBorderProps(),
  ...makeElevationProps(),
  ...makeRoundedProps(),
  ...makeTagProps({
    tag: "header"
  }),
  ...makeThemeProps()
}, "v-toolbar");
var VToolbar = genericComponent()({
  name: "VToolbar",
  props: makeVToolbarProps(),
  setup(props, _ref) {
    var _a;
    let {
      slots
    } = _ref;
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      themeClasses
    } = provideTheme(props);
    const isExtended = ref(!!(props.extended || ((_a = slots.extension) == null ? void 0 : _a.call(slots))));
    const contentHeight = computed(() => parseInt(Number(props.height) + (props.density === "prominent" ? Number(props.height) : 0) - (props.density === "comfortable" ? 8 : 0) - (props.density === "compact" ? 16 : 0), 10));
    const extensionHeight = computed(() => isExtended.value ? parseInt(Number(props.extensionHeight) + (props.density === "prominent" ? Number(props.extensionHeight) : 0) - (props.density === "comfortable" ? 4 : 0) - (props.density === "compact" ? 8 : 0), 10) : 0);
    provideDefaults({
      VBtn: {
        variant: "text"
      }
    });
    useRender(() => {
      var _a2;
      const hasTitle = !!(props.title || slots.title);
      const hasImage = !!(slots.image || props.image);
      const extension = (_a2 = slots.extension) == null ? void 0 : _a2.call(slots);
      isExtended.value = !!(props.extended || extension);
      return createVNode(props.tag, {
        "class": ["v-toolbar", {
          "v-toolbar--absolute": props.absolute,
          "v-toolbar--collapse": props.collapse,
          "v-toolbar--flat": props.flat,
          "v-toolbar--floating": props.floating,
          [`v-toolbar--density-${props.density}`]: true
        }, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value, themeClasses.value],
        "style": [backgroundColorStyles.value]
      }, {
        default: () => [hasImage && createVNode("div", {
          "key": "image",
          "class": "v-toolbar__image"
        }, [!slots.image ? createVNode(VImg, {
          "key": "image-img",
          "cover": true,
          "src": props.image
        }, null) : createVNode(VDefaultsProvider, {
          "key": "image-defaults",
          "disabled": !props.image,
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          }
        }, slots.image)]), createVNode(VDefaultsProvider, {
          "defaults": {
            VTabs: {
              height: convertToUnit(contentHeight.value)
            }
          }
        }, {
          default: () => {
            var _a3, _b, _c;
            return [createVNode("div", {
              "class": "v-toolbar__content",
              "style": {
                height: convertToUnit(contentHeight.value)
              }
            }, [slots.prepend && createVNode("div", {
              "class": "v-toolbar__prepend"
            }, [(_a3 = slots.prepend) == null ? void 0 : _a3.call(slots)]), hasTitle && createVNode(VToolbarTitle, {
              "key": "title",
              "text": props.title
            }, {
              text: slots.title
            }), (_b = slots.default) == null ? void 0 : _b.call(slots), slots.append && createVNode("div", {
              "class": "v-toolbar__append"
            }, [(_c = slots.append) == null ? void 0 : _c.call(slots)])])];
          }
        }), createVNode(VDefaultsProvider, {
          "defaults": {
            VTabs: {
              height: convertToUnit(extensionHeight.value)
            }
          }
        }, {
          default: () => [createVNode(VExpandTransition, null, {
            default: () => [isExtended.value && createVNode("div", {
              "class": "v-toolbar__extension",
              "style": {
                height: convertToUnit(extensionHeight.value)
              }
            }, [extension])]
          })]
        })]
      });
    });
    return {
      contentHeight,
      extensionHeight
    };
  }
});
function filterToolbarProps(props) {
  var _a;
  return pick(props, Object.keys((_a = VToolbar == null ? void 0 : VToolbar.props) != null ? _a : {}));
}

// node_modules/vuetify/lib/components/VAppBar/VAppBar.mjs
var VAppBar = genericComponent()({
  name: "VAppBar",
  props: {
    modelValue: {
      type: Boolean,
      default: true
    },
    location: {
      type: String,
      default: "top",
      validator: (value) => ["top", "bottom"].includes(value)
    },
    ...makeVToolbarProps(),
    ...makeLayoutItemProps(),
    height: {
      type: [Number, String],
      default: 64
    }
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const vToolbarRef = ref();
    const isActive = useProxiedModel(props, "modelValue");
    const height = computed(() => {
      var _a, _b, _c, _d;
      const height2 = (_b = (_a = vToolbarRef.value) == null ? void 0 : _a.contentHeight) != null ? _b : 0;
      const extensionHeight = (_d = (_c = vToolbarRef.value) == null ? void 0 : _c.extensionHeight) != null ? _d : 0;
      return height2 + extensionHeight;
    });
    const {
      ssrBootStyles
    } = useSsrBoot();
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      order: computed(() => parseInt(props.order, 10)),
      position: toRef(props, "location"),
      layoutSize: height,
      elementSize: height,
      active: isActive,
      absolute: toRef(props, "absolute")
    });
    useRender(() => {
      const [toolbarProps] = filterToolbarProps(props);
      return createVNode(VToolbar, mergeProps({
        "ref": vToolbarRef,
        "class": ["v-app-bar", {
          "v-app-bar--bottom": props.location === "bottom"
        }],
        "style": {
          ...layoutItemStyles.value,
          height: void 0,
          ...ssrBootStyles.value
        }
      }, toolbarProps), slots);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VAppBar/VAppBarNavIcon.mjs
var VAppBarNavIcon = genericComponent()({
  name: "VAppBarNavIcon",
  props: {
    icon: {
      type: IconValue,
      default: "$menu"
    }
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => createVNode(VBtn, {
      "class": "v-app-bar-nav-icon",
      "icon": props.icon
    }, slots));
    return {};
  }
});

// node_modules/vuetify/lib/components/VToolbar/VToolbarItems.mjs
var VToolbarItems = genericComponent()({
  name: "VToolbarItems",
  props: makeVariantProps({
    variant: "text"
  }),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    provideDefaults({
      VBtn: {
        color: toRef(props, "color"),
        height: "inherit",
        variant: toRef(props, "variant")
      }
    });
    useRender(() => {
      var _a;
      return createVNode("div", {
        "class": "v-toolbar-items"
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VAppBar/VAppBarTitle.mjs
var VAppBarTitle = genericComponent()({
  name: "VAppBarTitle",
  props: makeVToolbarTitleProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => createVNode(VToolbarTitle, mergeProps(props, {
      "class": "v-app-bar-title"
    }), slots));
    return {};
  }
});
export {
  VAppBar,
  VAppBarNavIcon,
  VAppBarTitle
};
//# sourceMappingURL=vuetify_lib_components_VAppBar_index__mjs.js.map
