{
  "version": 3,
  "sources": ["../../vuetify/src/components/VItemGroup/VItemGroup.tsx", "../../vuetify/src/components/VItemGroup/VItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VItemGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { genericComponent } from '@/util'\n\nexport const VItemGroupSymbol = Symbol.for('vuetify:v-item-group')\n\nexport const VItemGroup = genericComponent()({\n  name: 'VItemGroup',\n\n  props: {\n    ...makeGroupProps({\n      selectedClass: 'v-item--selected',\n    }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VItemGroupSymbol)\n\n    return () => (\n      <props.tag\n        class={[\n          'v-item-group',\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        })}\n      </props.tag>\n    )\n  },\n})\n\nexport type VItemGroup = InstanceType<typeof VItemGroup>\n", "// Composables\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { VItemGroupSymbol } from './VItemGroup'\n\n// Utilities\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VItem = genericComponent<{ default: [GroupItemProvide] }>()({\n  name: 'VItem',\n\n  props: makeGroupItemProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isSelected, select, toggle, selectedClass, value, disabled } = useGroupItem(props, VItemGroupSymbol)\n    return () => slots.default?.({\n      isSelected: isSelected.value,\n      selectedClass: selectedClass.value,\n      select,\n      toggle,\n      value: value.value,\n      disabled: disabled.value,\n    })\n  },\n})\n\nexport type VItem = InstanceType<typeof VItem>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAUO,IAAMA,mBAAmBC,OAAOC,IAAI,sBAAsB;AAE1D,IAAMC,aAAaC,iBAAgB,EAAG;EAC3CC,MAAM;EAENC,OAAO;IACL,GAAGC,eAAe;MAChBC,eAAe;IACjB,CAAC;IACD,GAAGC,aAAY;IACf,GAAGC,eAAc;EACnB;EAEAC,OAAO;IACL,qBAAsBC,WAAe;EACvC;EAEAC,MAAOP,OAAK,MAAa;AAAA,QAAX;MAAEQ;IAAM,IAAC;AACrB,UAAM;MAAEC;IAAa,IAAIC,aAAaV,KAAK;AAC3C,UAAM;MAAEW;MAAYC;MAAQC;MAAMC;MAAMC;IAAS,IAAIC,SAAShB,OAAON,gBAAgB;AAErF,WAAO,MAAA,YAAA,MAAA,KAAA;MAAA,SAEI,CACL,gBACAe,aAAaH,KAAK;IACnB,GAAA;MAAA,SAAA,MAAA;;AAAA,iBAECE,WAAMS,YAANT,+BAAgB;UAChBG;UACAC;UACAC;UACAC;UACAC,UAAUA,SAAST;QACrB,EAAE;;IAAA,CAAA;EAGR;AACF,CAAC;;;ACvCM,IAAMY,QAAQC,iBAAgB,EAAoC;EACvEC,MAAM;EAENC,OAAOC,mBAAkB;EAEzBC,OAAO;IACL,kBAAmBC,SAA4B;EACjD;EAEAC,MAAOJ,OAAK,MAAa;AAAA,QAAX;MAAEK;IAAM,IAAC;AACrB,UAAM;MAAEC;MAAYC;MAAQC;MAAQC;MAAeC;MAAOC;IAAS,IAAIC,aAAaZ,OAAOa,gBAAgB;AAC3G,WAAO,MAAA;AArBX;AAqBiBR,yBAAMS,YAANT,+BAAgB;QAC3BC,YAAYA,WAAWI;QACvBD,eAAeA,cAAcC;QAC7BH;QACAC;QACAE,OAAOA,MAAMA;QACbC,UAAUA,SAASD;MACrB;;EACF;AACF,CAAC;",
  "names": ["VItemGroupSymbol", "Symbol", "for", "VItemGroup", "genericComponent", "name", "props", "makeGroupProps", "selectedClass", "makeTagProps", "makeThemeProps", "emits", "value", "setup", "slots", "themeClasses", "provideTheme", "isSelected", "select", "next", "prev", "selected", "useGroup", "default", "VItem", "genericComponent", "name", "props", "makeGroupItemProps", "emits", "val", "setup", "slots", "isSelected", "select", "toggle", "selectedClass", "value", "disabled", "useGroupItem", "VItemGroupSymbol", "default"]
}
